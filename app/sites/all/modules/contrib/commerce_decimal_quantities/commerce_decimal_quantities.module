<?php

/**
 * Module to allow for decimal quantities of products.
 */

/**
 * Implements hook_form_ID_alter().
 *
 * Provides a checkbox on the Product type edit form to allow decimal quantities.
 */
function commerce_decimal_quantities_form_commerce_product_ui_product_type_form_alter(&$form, &$form_state) {
  ctools_include('export');
  $preset = ctools_export_crud_load('commerce_decimal_quantities', $form_state['product_type']['type']);
  if (is_object($preset) && isset($preset->allow_decimal)) {
    $default = $preset->allow_decimal;
  }
  else {
    $default = FALSE;
  }
  $form['product_type']['decimal'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow decimal quantities'),
    '#default_value' => $default,
    '#description' => t('Check this box if you want to allow the user to buy non-integer quantities from this product.'),
    '#element_validate' => array('commerce_decimal_quantities_checkbox_validate'),
  );
}

/**
 * Element validation callback for the decimal checkbox.
 */
function  commerce_decimal_quantities_checkbox_validate($element, &$form_state, $form) {
  ctools_include('export');
  $preset = ctools_export_crud_load('commerce_decimal_quantities', $form_state['product_type']['type']);
  $decimal_setting = empty($preset) ? ctools_export_crud_new('commerce_decimal_quantities') : $preset;
  $decimal_setting->allow_decimal = $element['#value'];
  // Product creation or update
  $decimal_setting->product_type = empty($form_state['product_type']['type']) ? $form_state['values']['product_type']['type'] : $form_state['product_type']['type'];

  ctools_export_crud_save('commerce_decimal_quantities', $decimal_setting);
}

/**
 * Implements hook_ctooks_plugin_api().
 */
function commerce_decimal_quantities_ctools_plugin_api($owner, $api) {
  if ($owner == 'commerce_decimal_quantities' && $api == 'default_commerce_decimal_quantities_presets') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_commerce_product_type_delete().
 */
function commerce_decimal_quantities_commerce_product_type_delete($product_type, $skip_reset) {
  ctools_include('export');
  ctools_export_crud_delete('commerce_decimal_quantities', $product_type['type']);
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hack the Add to cart form to accept fractional quantities if the product type allows it.
 */
function commerce_decimal_quantities_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  ctools_include('export');
  if (isset($form_state['default_product'])) {
    $preset = ctools_export_crud_load('commerce_decimal_quantities', $form_state['default_product']->type);
    if (is_object($preset) && $preset->allow_decimal) {
      $form['quantity']['#datatype'] = 'decimal';
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Hack quantity form in each view to accept fractional quantities
 * if the product type allows it.
 */
function commerce_decimal_quantities_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['edit_quantity'])) {
    commerce_decimal_quantities_update_views_edit_quantity($form, $form_state);
  }
}

function commerce_decimal_quantities_update_views_edit_quantity(&$form, &$form_state) {
  foreach (element_children($form['edit_quantity']) as $child) {
    if (isset($form['edit_quantity'][$child]['#line_item_id'])) {
      $line_item = commerce_line_item_load($form['edit_quantity'][$child]['#line_item_id']);
      $product = commerce_product_load($line_item->commerce_product[LANGUAGE_NONE][0]['product_id']);
      ctools_include('export');
      // Get the decimal quantities setting for this product type
      $preset = ctools_export_crud_load('commerce_decimal_quantities', $product->type);
      if (is_object($preset) && $preset->allow_decimal) {
        $form['edit_quantity'][$child]['#datatype'] = 'decimal';
        $form['edit_quantity'][$child]['#default_value'] = $line_item->quantity;
      }
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function commerce_decimal_quantities_field_widget_form_alter(&$element, &$form_state, $context) {
  // Only proceed if this widget form is a commerce line item manager and there
  // are line items to modify.
  if ($context['instance']['widget']['type'] === 'commerce_line_item_manager' and isset($element['line_items'])) {
    // Loop through each item in the array.
    foreach ($element['line_items'] as $delta => $line_item) {
      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item['line_item']['#value']);
      if (isset($line_item_wrapper->commerce_product)) {
        // If the product referenced in the line item accepts decimals...
        ctools_include('export');
        $preset = ctools_export_crud_load('commerce_decimal_quantities', $line_item_wrapper->commerce_product->type->value());
        if (is_object($preset) && isset($preset->allow_decimal)) {
          // Set that line item quantity datatype to decimal.
          $element['line_items'][$delta]['quantity']['#datatype'] = 'decimal';
          $element['line_items'][$delta]['quantity']['#default_value'] = $line_item_wrapper->quantity->value();
          $element['line_items'][$delta]['quantity']['#size'] = 7;
          $element['line_items'][$delta]['quantity']['#maxlength'] = 7;
        }
      }
    }
  }
}
