<?php
class TaxonomyAccessTestCase extends DrupalWebTestCase {
  // There are four types of users:
  // site admins, taxonomy admins, content editors, and regular users.
  protected $users = array();
  protected $user_roles = array();
  protected $user_config = array(
    'site_admin' => array(
      'access content',
      'access site reports',
      'access administration pages',
      'administer permissions',
      'create article content',
      'edit any article content',
      'create page content',
      'edit any page content',
    ),
    'tax_admin' => array(
      'access content',
      'administer taxonomy',
    ),

    'editor' => array(
      'access content',
      'create article content',
      'create page content',
    ),
    'regular_user' =>
      array(
        'access content',
      ),
  );

  public function setUp() {
    // Enable module and dependencies.
    parent::setUp('taxonomy_access');

    // Rebuild node access on installation.
    node_access_rebuild();

    // Configure users with base permission patterns.
    foreach ($this->user_config as $user => $permissions) {
      $this->users[$user] = $this->drupalCreateUser($permissions);

      // Save the role ID separately so it's easy to retrieve.
      foreach ($this->users[$user]->roles as $rid => $role) {
        if ($rid != DRUPAL_AUTHENTICATED_RID) {
          $this->user_roles[$user] = user_role_load($rid);
        }
      }
    }

    // Give the anonymous and authenticated roles ignore grants.
    $rows = array();
    foreach (array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID) as $rid) {
      $ignore = array(
        'view' => 0,
        'update' => 0,
        'delete' => 0,
      );
      $rows[] = _taxonomy_access_format_grant_record(0, $rid, $ignore, TRUE);
    }
    taxonomy_access_set_default_grants($rows);

    foreach (array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID) as $rid) {
      $r =
        db_query(
          'SELECT grant_view FROM {taxonomy_access_default}
           WHERE vid = 0 AND rid = :rid',
          array(':rid' => $rid)
        )
        ->fetchField();
      $this->assertTrue(is_numeric($r) && $r == 0, t("Set global default for role %rid to <em>Ignore</em>", array('%rid' => $rid)));
    }
  }

  /**
   * Creates a vocabulary with a certain name.
   *
   * @param $machine_name
   *   A machine-safe name.
   *
   * @return
   *   The vocabulary object.
   */
  function createVocab($machine_name) {
    $vocabulary = new stdClass();
    $vocabulary->name = $machine_name;
    $vocabulary->description = $this->randomName();
    $vocabulary->machine_name = $machine_name;
    $vocabulary->help = '';
    $vocabulary->weight = mt_rand(0, 10);
    taxonomy_vocabulary_save($vocabulary);
    return $vocabulary;
  }

  /**
   * Creates a new term in the specified vocabulary.
   *
   * @param $machine_name
   *   A machine-safe name.
   * @param $vocab
   *   A vocabulary object.
   * @param $parent
   *   (optional) The tid of the parent term, if any.  Defaults to NULL.
   */
  function createTerm($machine_name, $vocab, $parent = NULL) {
    $term = new stdClass();
    $term->name = $machine_name;
    $term->description = $machine_name;
    // Use the first available text format.
    $term->format =
      db_query_range('SELECT format FROM {filter_format}', 0, 1)->fetchField();
    $term->vid = $vocab->vid;
    $term->vocabulary_machine_name = $vocab->machine_name;
    if (!is_null($parent)) {
      $term->parent = $parent;
    }
    taxonomy_term_save($term);
    return $term;
  }

  /**
   * Creates a taxonomy field and adds it to the page content type.
   *
   * @param $machine_name
   *   The machine name of the vocabulary to use.
   * @param $widget
   *   (optional) The name of the widget to use.  Defaults to 'options_select'.
   * @param $count
   *   (optional) The allowed number of values.  Defaults to unlimited.
   */
  function createField($machine_name, $widget = 'options_select', $count = FIELD_CARDINALITY_UNLIMITED) {
    $field = array(
      'field_name' => $machine_name,
      'type' => 'taxonomy_term_reference',
      'cardinality' => $count,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => $machine_name,
            'parent' => 0,
          ),
        ),
      ),
    );
    $field = field_create_field($field);

    $instance = array(
      'field_name' => $machine_name,
      'bundle' => 'page',
      'entity_type' => 'node',
      'widget' => array(
        'type' => $widget,
      ),
      'display' => array(
        'default' => array(
          'type' => 'taxonomy_term_reference_link',
        ),
      ),
    );

    return field_create_instance($instance);
  }

 /**
   * Creates an article with the specified terms.
   *
   * @param $autocreate
   *   (optional) An array of term names to autocreate. Defaults to array().
   * @param $existing
   *   (optional) An array of existing term IDs to add.
   *
   * @return
   *   The node object.
   */
  function createArticle($autocreate = array(), $existing = array()) {
    $values = array();
    foreach ($autocreate as $name) {
      $values[] = array('tid' => 'autocreate', 'vid' => 1, 'name' => $name, 'vocabulary_machine_name' => 'tags');
    }
    foreach ($existing as $tid) {
      $values[] = array('tid' => $tid, 'vid' => 1, 'vocabulary_machine_name' => 'tags');
    }

    // Bloody $langcodes.
    $values = array(LANGUAGE_NONE => $values);

    $settings = array(
      'type' => 'article',
      'field_tags' => $values,
    );

    return $this->drupalCreateNode($settings);
  }

  /**
   * Submits the node access rebuild form.
   */
  function rebuild() {
    $this->drupalPost('admin/reports/status/rebuild', array(), t('Rebuild permissions'));
    $this->assertText(t('The content access permissions have been rebuilt.'));
  }

  /**
   * Asserts that an enable or edit link is found for the role.
   *
   * @param $rid
   *   The role ID to check.
   * @param $enable
   *   (optional) Whether the text should be 'edit' (TRUE) or 'enable' (FALSE).
   *   Defaults to FALSE.
   */
  function checkRoleEditEnable($rid, $enable = FALSE) {
    $this->assertLinkByHref(
      TAXONOMY_ACCESS_CONFIG . "/role/$rid/edit",
      0,
      t('Edit link is available for role %rid.', array('%rid' => $rid))
    );

    if ($enable) {
      $this->assertRaw(
        TAXONOMY_ACCESS_CONFIG . "/role/$rid/edit\">enable",
        t('Link text is "enable" for role %rid.', array('%rid' => $rid))
      );
      $this->assertNoRaw(
        TAXONOMY_ACCESS_CONFIG . "/role/$rid/edit\">edit",
        t('Link text is not "edit" for role %rid.', array('%rid' => $rid))
      );
    }
    else {
      $this->assertRaw(
        TAXONOMY_ACCESS_CONFIG . "/role/$rid/edit\">edit",
        t('Link text is "edit" for role %rid.', array('%rid' => $rid))
      );
      $this->assertNoRaw(
        TAXONOMY_ACCESS_CONFIG . "/role/$rid/edit\">enable",
        t('Link text is not "enable" for role %rid.', array('%rid' => $rid))
      );
    }
  }

  /**
   * Asserts that a disable link is or is not found for the role.
   *
   * @param $rid
   *   The role ID to check.
   * @param $found
   *   (optional) Whether the link should be found, or not.  Defaults to TRUE.
   *   Defaults to FALSE.
   */
  function checkRoleDisable($rid, $found = TRUE) {
    if ($found) {
      $this->assertLinkByHref(
        TAXONOMY_ACCESS_CONFIG . "/role/$rid/delete",
        0,
        t('Disable link is available for role %rid.', array('%rid' => $rid))
      );
      $this->assertRaw(
        TAXONOMY_ACCESS_CONFIG . "/role/$rid/delete\">disable",
        t('Link text is "disable" for role %rid.', array('%rid' => $rid))
      );
    }
    else {
      $this->assertNoLinkByHref(
        TAXONOMY_ACCESS_CONFIG . "/role/$rid/delete",
        t('Disable link is not available for role %rid.', array('%rid' => $rid))
      );
      $this->assertNoRaw(
        TAXONOMY_ACCESS_CONFIG . "/role/$rid/delete\">disable",
        t('There is no link text "disable" for role %rid.', array('%rid' => $rid))
      );
    }
  }

  /**
   * Adds a row on the TAC configuration form.
   *
   * @param &$edit
   *   The form data to post.
   * @param $vid
   *   (optional) The vocabulary ID.  Defaults to 0 (global default).
   * @param $tid
   *   (optional) The term ID.  Defaults to 0 (vocabulary default).
   * @param $view
   *   (optional) The view grant value (1, 0, or 2). Defaults to 0 (ignore).
   * @param $update
   *   (optional) The update grant value (1, 0, or 2). Defaults to 0 (ignore).
   * @param $delete
   *   (optional) The delete grant value (1, 0, or 2). Defaults to 0 (ignore).
   * @param $create
   *   (optional) The create grant value (0 or 1). Defaults to 0 (unchecked).
   * @param $list
   *   (optional) The list grant value  (0 or 1). Defaults to 0 (unchecked).
   */
  function addFormRow(&$edit,  $vid = 0, $tid = 0, $view = 0, $update = 0, $delete = 0, $create = 0, $list = 0) {
    $new_value = $tid ? "term $tid" : "default $vid";
    $edit["new[item]"] = $new_value;
    $edit["new[grants][view]"] = $view;
    $edit["new[grants][update]"] = $update;
    $edit["new[grants][delete]"] = $delete;
    $edit["new[grants][create]"] = $create;
    $edit["new[grants][list]"] = $list;
  }

  /**
   * Configures a row on the TAC configuration form.
   *
   * @param &$edit
   *   The form data to post.
   * @param $vid
   *   (optional) The vocabulary ID.  Defaults to 0 (global default).
   * @param $tid
   *   (optional) The term ID.  Defaults to 0 (vocabulary default).
   * @param $view
   *   (optional) The view grant value (1, 0, or 2). Defaults to 0 (ignore).
   * @param $update
   *   (optional) The update grant value (1, 0, or 2). Defaults to 0 (ignore).
   * @param $delete
   *   (optional) The delete grant value (1, 0, or 2). Defaults to 0 (ignore).
   * @param $create
   *   (optional) The create grant value (0 or 1). Defaults to 0 (unchecked).
   * @param $list
   *   (optional) The list grant value  (0 or 1). Defaults to 0 (unchecked).
   */
  function configureFormRow(&$edit,  $vid = 0, $tid = 0, $view = 0, $update = 0, $delete = 0, $create = 0, $list = 0) {
    $edit["grants[$vid][$tid][view]"] = $view;
    $edit["grants[$vid][$tid][update]"] = $update;
    $edit["grants[$vid][$tid][delete]"] = $delete;
    $edit["grants[$vid][$tid][create]"] = $create;
    $edit["grants[$vid][$tid][list]"] = $list;
  }
}

class TaxonomyAccessExternalChanges extends TaxonomyAccessTestCase {
  public static function getInfo() {
    return array(
      'name' => 'TAC External Change Tests',
      'description' => "Test TAC's response to changes from other modules.",
      'group' => 'Taxonomy Access Control',
    );
  }

  public function setUp() {
    parent::setUp();
  }

  /*
1. delete a term
2. delete a role
3. delete a field attachment
4. modify a field attachment
5. delete a vocabulary
6. add terms to node
7. remove terms from node
  */
}

class TaxonomyAccessConfigTest extends TaxonomyAccessTestCase {
  protected $articles = array();
  protected $pages = array();
  protected $vocabs = array();
  protected $terms = array();

  public static function getInfo() {
    return array(
      'name' => 'TAC Configuration Tests',
      'description' => 'Test TAC configuration forms.',
      'group' => 'Taxonomy Access Control',
    );
  }

  public function setUp() {
    parent::setUp();

    // Add two taxonomy fields to pages.
    foreach (array('v1', 'v2') as $vocab) {
      $this->vocabs[$vocab] = $this->createVocab($vocab);
      $this->createField($vocab);
      $this->terms[$vocab . 't1'] =
        $this->createTerm($vocab . 't1', $this->vocabs[$vocab]);
      $this->terms[$vocab . 't2'] =
        $this->createTerm($vocab . 't2', $this->vocabs[$vocab]);
    }

    // Set up a variety of nodes with different term combinations.
    $this->articles['no_tags'] = $this->createArticle();
    $this->articles['one_tag'] =
      $this->createArticle(array($this->randomName()));
    $this->articles['two_tags'] =
      $this->createArticle(array($this->randomName(), $this->randomName()));

    $this->pages['no_tags'] = $this->createPage();
    foreach ($this->terms as $t1) {
      $this->pages[$t1->name] = $this->createPage(array($t1->name));
      foreach ($this->terms as $t2) {
        $this->pages[$t1->name . '_' . $t2->name] =
          $this->createPage(array($t1->name, $t2->name));
      }
    }
  }

  /**
   * Creates a page with the specified terms.
   *
   * @param $terms
   *   (optional) An array of term names to tag the page.  Defaults to array().
   *
   * @return
   *   The node object.
   */
  function createPage($tags = array()) {
    $v1 = array();
    $v2 = array();

    foreach ($tags as $name) {
      switch ($this->terms[$name]->vid) {
        case ($this->vocabs['v1']->vid):
          $v1[] = array('tid' => $this->terms[$name]->tid);
          break;

        case ($this->vocabs['v2']->vid):
          $v2[] = array('tid' => $this->terms[$name]->tid);
          break;
      }
    }

    // Bloody $langcodes.
    $v1 = array(LANGUAGE_NONE => $v1);
    $v2 = array(LANGUAGE_NONE => $v2);

    $settings = array(
      'type' => 'page',
      'v1' => $v1,
      'v2' => $v2,
    );

    return $this->drupalCreateNode($settings);
  }

  function checkConfigAnonAuthLinks() {
    $this->drupalGet(TAXONOMY_ACCESS_CONFIG);
    $this->checkRoleEditEnable(DRUPAL_ANONYMOUS_RID);
    $this->checkRoleEditEnable(DRUPAL_AUTHENTICATED_RID);
    $this->checkRoleDisable(DRUPAL_ANONYMOUS_RID, FALSE);
    $this->checkRoleDisable(DRUPAL_AUTHENTICATED_RID, FALSE);
  }

  function checkConfigCustomRoleLinks() {
    foreach ($this->user_roles as $role) {
      $this->checkRoleEditEnable($role->rid, TRUE);
      $this->checkRoleDisable($role->rid, FALSE);
    }
  }

/*
- check anon and auth forms
- add recursive for vocab and for term
- change multiple
- delete multiple
- configure create and list
 */

  /**
   * Tests the initial state of the test environment:
   * 1. Access to all nodes is denied for anonymous users.
   * 2. The main admin page provides the correct configuration links.
   */
  public function testSetUpCheck() {
    // Visit all nodes as anonymous and verify that access is denied.
    foreach ($this->articles as $key => $article) {
      $this->drupalGet('node/' . $article->nid);
      $this->assertResponse(403, t("Access to %name article (nid %nid) is denied.", array('%name' => $key, '%nid' => $article->nid)));
    }
    foreach ($this->pages as $key => $page) {
      $this->drupalGet('node/' . $page->nid);
      $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
    }

    // Log in as the regular_user.
    $this->drupalLogin($this->users['regular_user']);

    // Visit all nodes and verify that access is denied.
    foreach ($this->articles as $key => $article) {
      $this->drupalGet('node/' . $article->nid);
      $this->assertResponse(403, t("Access to %name article (nid %nid) is denied.", array('%name' => $key, '%nid' => $article->nid)));
    }
    foreach ($this->pages as $key => $page) {
      $this->drupalGet('node/' . $page->nid);
      $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
    }

    // Log in as the administrator.
    $this->drupalLogin($this->users['site_admin']);

    // Confirm that only edit links are available for anon. and auth.
    $this->checkConfigAnonAuthLinks();

    // Confirm that only enable links are available for our four custom roles.
    $this->checkConfigCustomRoleLinks();
  }

  /**
   * Tests configuring a global default:
   * 1. Access is updated for all nodes when there are no other configurations.
   * 2. Access is updated for the correct nodes when there are specific term
   *    and vocabulary configurations.
   */
  public function testGlobalDefaultConfig() {
    // Log in as the administrator.
    $this->drupalLogin($this->users['site_admin']);

    // Use the admin form to give anonymous view allow in the global default.
    $this->drupalGet(TAXONOMY_ACCESS_CONFIG . '/role/' . DRUPAL_ANONYMOUS_RID . '/edit');
    $edit = array();
    $this->configureFormRow($edit, 0, 0, 1);
    $this->drupalPost(NULL, $edit, 'Save all');

    // Log out.
    $this->drupalLogout();

    // Visit each node and verify that access is allowed.
    foreach ($this->articles as $key => $article) {
      $this->drupalGet('node/' . $article->nid);
      $this->assertResponse(200, t("Access to %name article (nid %nid) is allowed.", array('%name' => $key, '%nid' => $article->nid)));
    }
    foreach ($this->pages as $key => $page) {
      $this->drupalGet('node/' . $page->nid);
      $this->assertResponse(200, t("Access to %name page (nid %nid) is allowed.", array('%name' => $key, '%nid' => $page->nid)));
    }

    // Add some specific configurations programmatically.

    // Set the v1 default to view allow.
    $default_config = _taxonomy_access_format_grant_record(
      $this->vocabs['v1']->vid, DRUPAL_ANONYMOUS_RID, array('view' => 1), TRUE
    );
    taxonomy_access_set_default_grants(array($default_config));

    // Set v1t1 and v2t1 to view allow.
    $term_configs = array();
    foreach (array('v1t1', 'v2t1') as $name) {
      $term_configs[] = _taxonomy_access_format_grant_record(
        $this->terms[$name]->vid, DRUPAL_ANONYMOUS_RID, array('view' => 1)
      );
    }
    taxonomy_access_set_term_grants($term_configs);

    // This leaves articles and the v2t2 page controlled by the global default.

    // Log in as the administrator.
    $this->drupalLogin($this->users['site_admin']);

    // Use the admin form to give anonymous view deny in the global default.
    $this->drupalGet(TAXONOMY_ACCESS_CONFIG . '/role/' . DRUPAL_ANONYMOUS_RID . '/edit');
    $edit = array();
    $this->configureFormRow($edit, 0, 0, 2);
    $this->drupalPost(NULL, $edit, 'Save all');

    // Log out.
    $this->drupalLogout();

    // Visit each artile and verify that access is denied.
    foreach ($this->articles as $key => $article) {
      $this->drupalGet('node/' . $article->nid);
      $this->assertResponse(403, t("Access to %name article (nid %nid) is denied.", array('%name' => $key, '%nid' => $article->nid)));
    }

    // Visit each page.
    foreach ($this->pages as $key => $page) {
      $this->drupalGet('node/' . $page->nid);

      switch (TRUE) {
        // If the page has no tags, access should be denied.
        case ($key == 'no_tags'):
        // If the page is tagged with v2t2, access should be denied.
        case (strpos($key, 'v2t2') !== FALSE):
          $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
          break;

        // Otherwise, access should be allowed.
        default:
          $this->assertResponse(200, t("Access to %name page (nid %nid) is allowed.", array('%name' => $key, '%nid' => $page->nid)));
          break;
      }
    }
  }

  /**
   * Tests configuring vocabulary defaults:
   * 1. Access is updated correctly when the vocabulary default is added.
   * 2. Access is updated correctly when there is a specific term configuration
   *    in the vocabulary.
   * 3. Access is updated correctly when multiple defaults are changed.
   * 4. Access is updated correctly when the vocabulary default is deleted.
   */
  public function testVocabularyDefaultConfig() {
    // Log in as the administrator.
    $this->drupalLogin($this->users['site_admin']);

    // Use the admin form to give anonymous view allow for the v1 default.
    $this->drupalGet(TAXONOMY_ACCESS_CONFIG . '/role/' . DRUPAL_ANONYMOUS_RID . '/edit');
    $edit = array();
    $this->addFormRow($edit, $this->vocabs['v1']->vid, 0, 1);
    $this->drupalPost(NULL, $edit, 'Add');

    // Log out.
    $this->drupalLogout();

    // Visit each page and verify whether access is allowed or denied.
    foreach ($this->pages as $key => $page) {
      $this->drupalGet('node/' . $page->nid);

      // If the page is tagged with a v1 term, access should be allowed.
      if (strpos($key, 'v1') !== FALSE) {
        $this->assertResponse(200, t("Access to %name page (nid %nid) is allowed.", array('%name' => $key, '%nid' => $page->nid)));
      }
      // Otherwise, access should be denied.
      else {
        $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
      }
    }

    // Add a specific configuration for v2t1 programmatically.
    $term_config = _taxonomy_access_format_grant_record(
      $this->terms['v2t1']->tid, DRUPAL_ANONYMOUS_RID, array('view' => 0)
    );

    taxonomy_access_set_term_grants(array($term_config));

    // Log in as the administrator.
    $this->drupalLogin($this->users['site_admin']);

    // Use the admin form to give anonymous view deny for the v2 default.
    $this->drupalGet(TAXONOMY_ACCESS_CONFIG . '/role/' . DRUPAL_ANONYMOUS_RID . '/edit');
    $edit = array();
    $this->addFormRow($edit, $this->vocabs['v2']->vid, 0, 2);
    $this->drupalPost(NULL, $edit, 'Add');

    // Log out.
    $this->drupalLogout();

    // Visit each page and verify whether access is allowed or denied.
    foreach ($this->pages as $key => $page) {
      $this->drupalGet('node/' . $page->nid);

      switch (TRUE) {
        // If the page is tagged with v2t2, the v2 default is inherited: Deny.
        case (strpos($key, 'v2t2') !== FALSE):
          $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
          break;

        // Otherwise, if the page is tagged with v1, it's allowed.
        case (strpos($key, 'v1') !== FALSE):
          $this->assertResponse(200, t("Access to %name page (nid %nid) is allowed.", array('%name' => $key, '%nid' => $page->nid)));
          break;

        // Access should be denied by default.
        default:
          $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
          break;
      }
    }

    // Log in as the administrator.
    $this->drupalLogin($this->users['site_admin']);

    // Use the form to change the configuration: Allow for v2; Deny for v1.
    $this->drupalGet(TAXONOMY_ACCESS_CONFIG . '/role/' . DRUPAL_ANONYMOUS_RID . '/edit');
    $edit = array();
    $this->configureFormRow($edit, $this->vocabs['v2']->vid, 0, 1);
    $this->configureFormRow($edit, $this->vocabs['v1']->vid, 0, 2);
    $this->drupalPost(NULL, $edit, 'Save all');

    // Log out.
    $this->drupalLogout();

    // Visit each page and verify whether access is allowed or denied.
    foreach ($this->pages as $key => $page) {
      $this->drupalGet('node/' . $page->nid);

      switch (TRUE) {
        // If the page is tagged with a v1 term, access should be denied.
        case (strpos($key, 'v1') !== FALSE):
          $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
          break;

        // Otherwise, if the page is tagged with v2t2, the default is
        // inherited and access should be allowed.
        case (strpos($key, 'v2t2') !== FALSE):
          $this->assertResponse(200, t("Access to %name page (nid %nid) is allowed.", array('%name' => $key, '%nid' => $page->nid)));
          break;

        // Access should be denied by default.
        default:
          $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
          break;
      }
    }

    // Log in as the administrator.
    $this->drupalLogin($this->users['site_admin']);

    // Use the form to delete the v1 default.
    $this->drupalGet(TAXONOMY_ACCESS_CONFIG . '/role/' . DRUPAL_ANONYMOUS_RID . '/edit');
    $edit = array();
    $edit["selected_defaults[{$this->vocabs['v1']->vid}]"] = 1;
    $this->drupalPost(NULL, $edit, 'Delete selected');

    // Log out.
    $this->drupalLogout();

    // Visit each page and verify whether access is allowed or denied.
    foreach ($this->pages as $key => $page) {
      $this->drupalGet('node/' . $page->nid);

      // If the page is tagged with v2t2, access should be allowed.
      if (strpos($key, 'v2t2') !== FALSE) {
        $this->assertResponse(200, t("Access to %name page (nid %nid) is allowed.", array('%name' => $key, '%nid' => $page->nid)));
      }
      // Otherwise, access should be denied.
      else {
        $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
      }
    }
  }

  /**
   * Tests configuring specific terms:
   * 1. Access is updated correctly when the term configuration is added.
   * 2. Access is updated correctly when there is a vocabulary default.
   * 3. Access is updated correctly when multiple configurations are changed.
   * 4. Access is updated correctly when the term configuration is deleted.
   */
  public function testTermConfig() {
    // Log in as the administrator.
    $this->drupalLogin($this->users['site_admin']);

    // Use the admin form to give anonymous view allow for v1t1.
    $this->drupalGet(TAXONOMY_ACCESS_CONFIG . '/role/' . DRUPAL_ANONYMOUS_RID . '/edit');
    $edit = array();
    $this->addFormRow($edit, $this->vocabs['v1']->vid, $this->terms['v1t1']->tid, 1);
    $this->drupalPost(NULL, $edit, 'Add');

    // Log out.
    $this->drupalLogout();

    // Visit each page and verify whether access is allowed or denied.
    foreach ($this->pages as $key => $page) {
      $this->drupalGet('node/' . $page->nid);

      // If the page is tagged with v1t1, access should be allowed.
      if (strpos($key, 'v1t1') !== FALSE) {
        $this->assertResponse(200, t("Access to %name page (nid %nid) is allowed.", array('%name' => $key, '%nid' => $page->nid)));
      }
      // Otherwise, access should be denied.
      else {
        $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
      }
    }

    // Add a vocabulary default for v2 programmatically.
    $default_config = _taxonomy_access_format_grant_record(
      $this->vocabs['v2']->vid, DRUPAL_ANONYMOUS_RID, array('view' => 0), TRUE
    );

    taxonomy_access_set_default_grants(array($default_config));

    // Log in as the administrator.
    $this->drupalLogin($this->users['site_admin']);

    // Use the admin form to give anonymous view deny for v2t1.
    $this->drupalGet(TAXONOMY_ACCESS_CONFIG . '/role/' . DRUPAL_ANONYMOUS_RID . '/edit');
    $edit = array();
    $this->addFormRow($edit, $this->vocabs['v2']->vid, $this->terms['v2t1']->tid, 2);
    $this->drupalPost(NULL, $edit, 'Add');

    // Log out.
    $this->drupalLogout();

    // Visit each page and verify whether access is allowed or denied.
    foreach ($this->pages as $key => $page) {
      $this->drupalGet('node/' . $page->nid);

      switch (TRUE) {
        // If the page is tagged with v2t1, access should be denied.
        case (strpos($key, 'v2t1') !== FALSE):
          $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
          break;

        // Otherwise, if the page is tagged with v1t1, it's allowed.
        case (strpos($key, 'v1t1') !== FALSE):
          $this->assertResponse(200, t("Access to %name page (nid %nid) is allowed.", array('%name' => $key, '%nid' => $page->nid)));
          break;

        // Access should be denied by default.
        default:
          $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
          break;
      }
    }

    // Log in as the administrator.
    $this->drupalLogin($this->users['site_admin']);

    // Use the form to change the configuration: Allow for v2t1; Deny for v1t1.
    $this->drupalGet(TAXONOMY_ACCESS_CONFIG . '/role/' . DRUPAL_ANONYMOUS_RID . '/edit');
    $edit = array();
    $this->configureFormRow(
      $edit, $this->vocabs['v2']->vid, $this->terms['v2t1']->tid, 1
    );
    $this->configureFormRow(
      $edit, $this->vocabs['v1']->vid, $this->terms['v1t1']->tid, 2
    );
    $this->drupalPost(NULL, $edit, 'Save all');

    // Log out.
    $this->drupalLogout();

    // Visit each page and verify whether access is allowed or denied.
    foreach ($this->pages as $key => $page) {
      $this->drupalGet('node/' . $page->nid);

      switch (TRUE) {
        // If the page is tagged with v1t1, access should be denied.
        case (strpos($key, 'v1t1') !== FALSE):
          $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
          break;

        // Otherwise, if the page is tagged with v2t1, it's allowed.
        case (strpos($key, 'v2t1') !== FALSE):
          $this->assertResponse(200, t("Access to %name page (nid %nid) is allowed.", array('%name' => $key, '%nid' => $page->nid)));
          break;

        // Access should be denied by default.
        default:
          $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
          break;
      }
    }

    // Log in as the administrator.
    $this->drupalLogin($this->users['site_admin']);

    // Use the form to delete the v2t1 configuration.
    $this->drupalGet(TAXONOMY_ACCESS_CONFIG . '/role/' . DRUPAL_ANONYMOUS_RID . '/edit');
    $edit = array();
    $edit["selected_terms[{$this->terms['v2t1']->tid}]"] = 1;
    $this->drupalPost(NULL, $edit, 'Delete selected');

    // Log out.
    $this->drupalLogout();

    // Visit each page and verify whether access is allowed or denied.
    foreach ($this->pages as $key => $page) {
      $this->drupalGet('node/' . $page->nid);

      // Access to all pages should be denied.
      $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
    }
  }

  /**
   * Tests adding a term configuration with children.
   */
  public function testTermWithChildren() {
    // Create some additional taxonomy terms in a hierarchy:
    // v1
    // - v1t1
    // - - v1t1c1
    // - - - v1t1c1g1
    // - - - v1t1c1g2
    // - - v1t1c2
    // - - v1t2

    $this->terms['v1t1c1'] = $this->createTerm(
      'v1t1c1',
      $this->vocabs['v1'],
      $this->terms['v1t1']->tid
    );
    $this->terms['v1t1c2'] = $this->createTerm(
      'v1t1c2',
      $this->vocabs['v1'],
      $this->terms['v1t1']->tid
    );
    $this->terms['v1t1c1g1'] = $this->createTerm(
      'v1t1c1g1',
      $this->vocabs['v1'],
      $this->terms['v1t1c1']->tid
    );
    $this->terms['v1t1c1g2'] = $this->createTerm(
      'v1t1c1g2',
      $this->vocabs['v1'],
      $this->terms['v1t1c1']->tid
    );

    // Add pages tagged with each.
    foreach (array('v1t1c1', 'v1t1c2', 'v1t1c1g1', 'v1t1c1g2') as $name) {
      $this->pages[$name] = $this->createPage(array($name));
    }

    // Log in as the administrator.
    $this->drupalLogin($this->users['site_admin']);

    // Use the admin form to give anonymous view allow for v1t1 and children.
    $this->drupalGet(TAXONOMY_ACCESS_CONFIG . '/role/' . DRUPAL_ANONYMOUS_RID . '/edit');
    $edit = array();
    $edit["new[recursive]"] = 1;
    $this->addFormRow($edit, $this->vocabs['v1']->vid, $this->terms['v1t1']->tid, 1);
    $this->drupalPost(NULL, $edit, 'Add');

  }

  /**
   * Tests enabling and disabling TAC for a custom role.
   */
  public function testRoleEnableDisable() {
    // Save some typing.
    $rid = $this->user_roles['regular_user']->rid;
    $name = $this->user_roles['regular_user']->name;

    // Log in as the administrator.
    $this->drupalLogout();
    $this->drupalLogin($this->users['site_admin']);

    // Enable TAC for the regular_user role.
    $this->drupalGet(TAXONOMY_ACCESS_CONFIG . "/role/$rid/edit");
    $this->assertRaw("<title>Access rules for $name", t('Role configuration for regular_user (%name) enabled successfully.', array('%name' => $name)));

    // Update the global default to allow view.
    $edit = array();
    $this->configureFormRow($edit, 0, 0, 1);
    $this->drupalPost(NULL, $edit, 'Save all');

    // Confirm that the edit and disable links appear.
    $this->checkRoleEditEnable($rid);
    $this->checkRoleDisable($rid);

    // Confirm that the anon. and auth. links are unaffected.
    $this->checkConfigAnonAuthLinks();

    // Confirm that there is only one disable link.
    $this->assertUniqueText('disable', t('There is only one disable link.'));

    // Check that the role is configured.
    $r =
      db_query(
        'SELECT grant_view FROM {taxonomy_access_default}
         WHERE vid = 0 AND rid = :rid',
        array(':rid' => $rid)
      )
      ->fetchField();
    $this->assertTrue($r == 1, t('Used form to grant the role %role view in the global default.', array('%role' => $name)));

    // Log in as the regular_user.
    $this->drupalLogout();
    $this->drupalLogin($this->users['regular_user']);

    // Visit each node and verify that access is allowed.
    foreach ($this->articles as $key => $article) {
      $this->drupalGet('node/' . $article->nid);
      $this->assertResponse(200, t("Access to %name article (nid %nid) is allowed.", array('%name' => $key, '%nid' => $article->nid)));
    }
    foreach ($this->pages as $key => $page) {
      $this->drupalGet('node/' . $page->nid);
      $this->assertResponse(200, t("Access to %name page (nid %nid) is allowed.", array('%name' => $key, '%nid' => $page->nid)));
    }

    // Log in as the administrator.
    $this->drupalLogout();
    $this->drupalLogin($this->users['site_admin']);

    // Disable the role.
    $this->drupalGet(TAXONOMY_ACCESS_CONFIG);
    $this->clickLink('disable access control');
    $this->assertText("Are you sure you want to delete all taxonomy access rules for the role $name", t('Disable form for role loaded.'));
    $this->drupalPost(NULL, array(), 'Delete all');

    // Confirm that a confirmation message appears.
    $this->assertText("All taxonomy access rules deleted for role $name", t('Confirmation message found.'));

    // Confirm edit/enable/disable links are in their original state.
    $this->checkConfigAnonAuthLinks();
    $this->checkConfigCustomRoleLinks();

    // Check that the role is no longer configured.
    $r =
      db_query(
        'SELECT grant_view FROM {taxonomy_access_default}
         WHERE vid = 0 AND rid = :rid',
        array(':rid' => $rid)
      )
      ->fetchField();
    $this->assertTrue(empty($r), t('All records removed for role %role.', array('%role' => $name)));

    // Log in as the regular_user.
    $this->drupalLogout();
    $this->drupalLogin($this->users['regular_user']);

    // Visit all nodes and verify that access is again denied.
    foreach ($this->articles as $key => $article) {
      $this->drupalGet('node/' . $article->nid);
      $this->assertResponse(403, t("Access to %name article (nid %nid) is denied.", array('%name' => $key, '%nid' => $article->nid)));
    }
    foreach ($this->pages as $key => $page) {
      $this->drupalGet('node/' . $page->nid);
      $this->assertResponse(403, t("Access to %name page (nid %nid) is denied.", array('%name' => $key, '%nid' => $page->nid)));
    }
  }
}


class TaxonomyAccessNodeGrantTest extends TaxonomyAccessTestCase {

  // There are three roles for node access testing:
  // global_allow   Receives "Allow" in the global default.
  // global_ignore  Receives "Ignore" in the global default.
  // global_deny    Receives "Deny" in the global default.
  // All roles receive the same permissions for terms and vocab defaults.
  protected $roles = array();
  protected $role_config = array(
    'global_allow' => array(),
    'global_ignore' => array(),
    'global_deny' => array(),
  );

  protected $vocabs = array();

  public static function getInfo() {
    return array(
      'name' => 'TAC Node Access Tests',
      'description' => 'Test node access for various grant configurations.',
      'group' => 'Taxonomy Access Control',
    );
  }

  public function setUp() {
    parent::setUp();

    // Configure roles with no additional permissions.
    foreach ($this->role_config as $role_name => $permissions) {
      $this->roles[$role_name] = $this->drupalCreateRole(array(), $role_name);
    }

    $node_grants = array('view', 'grant_update', 'delete');

    // Set up our testing taxonomy.

    // We will create 4 vocabularies: a, i, d, and nc
    // These names indicate what grant the vocab. default will have for view.
    // (NC means the vocab default is not configured.)

    $grant_types = array(
      'a' => array(),
      'i' => array(),
      'd' => array(),
      'nc' => array(),
    );

    // View alone can be used to test V/U/D because the logic is identical.
    foreach ($node_grants as $grant) {
      $grant_types['a'][$grant] = 1;
      $grant_types['i'][$grant] = 0;
      $grant_types['d'][$grant] = 2;
    }

    // Each vocabulary will have four parent terms in the same fashion:
    // a_parent, i_parent, d_parent, and nc_parent.

    // Each of these_parent terms will have children in each class, as well:
    // a_child, i_child, d_child, and nc_child.

    // So, each vocab looks something like:
    // - a_parent
    // - - a_child
    // - - i_child
    // - - d_child
    // - - nc_child
    // - i_parent
    // - - a_child
    // - - i_child
    // - - d_child
    // - - nc_child
    // - d_parent
    // - - a_child
    // - - i_child
    // - - d_child
    // - - nc_child
    // - nc_parent
    // - - a_child
    // - - i_child
    // - - d_child
    // - - nc_child

    $term_rows = array();
    $default_rows = array();
    $this->setUpAssertions = array();

    // Configure terms, vocabularies, and grants.
    foreach ($grant_types as $vocab_name => $default_grants) {
      // Create the vocabulary.
      $vocab_name = "v" . $vocab_name;
      $this->vocabs[$vocab_name] = array();
      $this->vocabs[$vocab_name]['vocab'] = parent::createVocab($vocab_name);
      $this->vocabs[$vocab_name]['terms'] = array();
      $vocab = $this->vocabs[$vocab_name]['vocab'];

      // Add a field for the vocabulary to pages.
      $this->createField($vocab_name);

      // Configure default grants for the vocabulary for each role.
      if (!empty($default_grants)) {
        foreach ($this->roles as $name => $role) {
          $default_rows[] =  _taxonomy_access_format_grant_record($vocab->vid, $role, $default_grants, TRUE);
              $this->setUpAssertions[] = array(
                'grant' => $default_grants['view'],
                'query' => 'SELECT grant_view FROM {taxonomy_access_default} WHERE vid = :vid AND rid = :rid',
                'args' => array(':vid' => $vocab->vid, ':rid' => $role),
                'message' => t('Configured default grants for vocab %vocab, role %role', array('%vocab' => $vocab->machine_name, '%role' => $name)),
                );
        }
      }

      // Create terms.
      foreach ($grant_types as $parent_name => $parent_grants) {

        // Create parent term.
        $parent_name = $vocab_name . "__" . $parent_name . "_parent";
        $this->vocabs[$vocab_name]['terms'][$parent_name] =
          parent::createTerm($parent_name, $vocab);
        $parent_id = $this->vocabs[$vocab_name]['terms'][$parent_name]->tid;

        // Configure grants for the parent term for each role.
        if (!empty($parent_grants)) {
          foreach ($this->roles as $name => $role) {
            $term_rows[] =  _taxonomy_access_format_grant_record($parent_id, $role, $parent_grants);
              $this->setUpAssertions[] = array(
                'grant' => $parent_grants['view'],
                'query' => 'SELECT grant_view FROM {taxonomy_access_term} WHERE tid = :tid AND rid = :rid',
                'args' => array(':tid' => $parent_id, ':rid' => $role),
                'message' => t('Configured grants for term %term, role %role', array('%term' => $parent_name, '%role' => $name)),
                );
          }
        }

        // Create child terms.
        foreach ($grant_types as $child_name => $child_grants) {
          $child_name = $parent_name . "__" . $child_name . "_child";
          $this->vocabs[$vocab_name]['terms'][$child_name] =
            parent::createTerm($child_name, $vocab, $parent_id);
          $child_id = $this->vocabs[$vocab_name]['terms'][$child_name]->tid;

          // Configure grants for the child term for each role.
          if (!empty($child_grants)) {
            foreach ($this->roles as $name => $role) {
              $term_rows[] =  _taxonomy_access_format_grant_record($child_id, $role, $child_grants);
              $this->setUpAssertions[] = array(
                'grant' => $child_grants['view'],
                'query' => 'SELECT grant_view FROM {taxonomy_access_term} WHERE tid = :tid AND rid = :rid',
                'args' => array(':tid' => $child_id, ':rid' => $role),
                'message' => t('Configured grants for term %term, role %role', array('%term' => $child_name, '%role' => $name)),
                );
            }
          }
        }
      }
    }

    // Set the grants.
    taxonomy_access_set_default_grants($default_rows);
    taxonomy_access_set_term_grants($term_rows);
  }

  public function testSetUpCheck() {
    // Check that all records were properly stored.
    foreach ($this->setUpAssertions as $assertion) {
      $r = db_query($assertion['query'], $assertion['args'])->fetchField();
      $this->assertTrue(is_numeric($r) && $r == $assertion['grant'], $assertion['message']);
    }
  }

  // Role config tests:
  // Create a role
  // Create a user with the role
  // Configure role grants via form
  // Add, with children, delete
  // Confirm records stored
  // Confirm node access properly updated
  // Go back and edit, repeat.
  // Disable role.
  // Confirm form.
  // Update node access if prompted.
  // Confirm records deleted.
  // Confirm node access updated.

  /*
1. delete a term
2. change a grant config
3. delete a grant config
4. change a vocab default
5. delete a voacb default
6. disable a role
7. delete a role
8. delete a field attachment
9. delete a vocabulary
  */

}

/*
Roles for term grants
    'ctlt' => array(),
    'ctlf' => array(),
    'cflt' => array(),
    'cflf' => array(),

  // There are then four roles for term access testing:
  // ctlt   Receives both "Create" and "List" in the global default.
  // ctlf   Receives "Create" but not "List" in the global default.
  // cflt   Receives "List" but not "Create" in the global default.
  // cflf   Receives neither "Create" nor "List" in the global default.
  // All roles receive the same permissions for terms and vocab defaults.
*/